// C++ program to find out all combinations of
// given positive numbers that add upto given number
#include <iostream>
using namespace std;
int total=0;

void findCombinationsUtil(int arr[], int index, int denominations[],
					int num, int reducedNum)
{
	// Base condition
	if (reducedNum < 0)
		return;

	// If combination is found, print it
	if (reducedNum == 0)
	{
		total++;
		return;
	}

	// Find the previous number stored in arr[]
	// It helps in maintaining increasing order
	int prev = (index == 0)? 0 : arr[index-1];

	// note loop starts from previous number
	// i.e. at array location index - 1
	for (int k = prev; denominations[k] <= num ; k++)
	{
		// next element of array is k
		arr[index] = k;

		// call recursively with reduced number
		findCombinationsUtil(arr, index + 1, denominations, num,
								reducedNum - denominations[k]);
	}
}

/* Function to find out all combinations of
positive numbers that add upto given number.
It uses findCombinationsUtil() */
void findCombinations(int n, int denominations[])
{
	// array to store the combinations
	// It can contain max n elements
	int arr[n];

	//find all combinations
	findCombinationsUtil(arr, 0, denominations, n, n);
	cout << "here is the denominations list: ";
	cout << denominations[0] << ", " << denominations[1] << ", " << denominations[2] << endl;
	cout << "n = " << n << endl;
}

// Driver code
int main()
{
	int n = 6;
	int denominations[] = {1, 2, 3};
	findCombinations(n, denominations);
	cout << "the total is " << total;
	return 0;
}
